from telethon import TelegramClient
import asyncio
import re
from datetime import datetime, time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
api_id = 23937071  # –í–∞—à API ID
api_hash = "d4abf89f2ff12e2f9c2b35035b4f8e86"  # –í–∞—à API Hash
CHAT_ID = -1002031799801  # ID —á–∞—Ç–∞ –∫–∞–Ω–∞–ª–∞
CHECK_INTERVAL = 5  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)

# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
TRIGGER_PATTERN = re.compile(r'^50 000 –ø–ø –∑–∞ 325.*–∫—Ç–æ –≤–æ–∑—å–º–µ—Ç –∑–∞–∫–∞–∑\?.*‚ùå', re.IGNORECASE)
CONFIRM_PATTERN = re.compile(r'‚úÖ‚úÖ‚úÖ\.?$')  # –° —Ç–æ—á–∫–æ–π –∏–ª–∏ –±–µ–∑ –≤ –∫–æ–Ω—Ü–µ

# –¢–µ–∫—Å—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
WARNING_REPLY = "–Ø"
CONFIRM_REPLY = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –ø–æ–ª—É—á–µ–Ω–∏–µ!"

# –í—Ä–µ–º—è "—Ç–∏—à–∏–Ω—ã" (–Ω–µ –æ—Ç–≤–µ—á–∞–µ–º —Å 23:00 –¥–æ 8:00)
QUIET_HOURS_START = time(23, 0)
QUIET_HOURS_END = time(10, 0)

# –•—Ä–∞–Ω–∏–º ID —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
answered_messages = set()

def is_quiet_time():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–µ–π—á–∞—Å –≤—Ä–µ–º—è '—Ç–∏—à–∏–Ω—ã' (–Ω–µ –æ—Ç–≤–µ—á–∞–µ–º)"""
    now = datetime.now().time()
    return QUIET_HOURS_START <= now or now < QUIET_HOURS_END

async def check_messages(client):
    try:
        current_time = datetime.now().strftime('%H:%M:%S')
        print(f"\n{current_time} –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
        async for message in client.iter_messages(CHAT_ID, limit=20):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ –æ—Ç–≤–µ—á–∞–ª–∏
            if message.id in answered_messages:
                continue
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (‚úÖ‚úÖ‚úÖ)
            if message.text and CONFIRM_PATTERN.search(message.text):
                print(f"üîî –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {message.text}")
                await client.send_message(
                    CHAT_ID,
                    CONFIRM_REPLY,
                    reply_to=message.id
                )
                answered_messages.add(message.id)
                continue
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –Ω–µ –≤ "—Ç–∏—Ö–∏–µ" —á–∞—Å—ã)
            if not is_quiet_time() and message.text and TRIGGER_PATTERN.search(message.text):
                print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ü–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text[:60]}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—à–∏ –æ—Ç–≤–µ—Ç—ã
                replied = False
                async for reply in client.iter_messages(
                    CHAT_ID,
                    reply_to=message.id,
                    from_user="me"
                ):
                    replied = True
                    break
                
                if not replied:
                    print("üí¨ –û—Ç–≤–µ—á–∞—é —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º...")
                    await client.send_message(
                        CHAT_ID,
                        WARNING_REPLY,
                        reply_to=message.id
                    )
                    answered_messages.add(message.id)
                else:
                    print("‚è© –£–∂–µ –æ—Ç–≤–µ—á–∞–ª, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                    answered_messages.add(message.id)
                    
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

async def main():
    client = TelegramClient('session_name', api_id, api_hash)
    await client.start()
    
    print("üîç –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ú–æ–Ω–∏—Ç–æ—Ä—é —á–∞—Ç...")
    print(f"‚è∞ –†–µ–∂–∏–º '—Ç–∏—à–∏–Ω—ã' —Å {QUIET_HOURS_START.strftime('%H:%M')} –¥–æ {QUIET_HOURS_END.strftime('%H:%M')}")
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
    while True:
        await check_messages(client)
        await asyncio.sleep(CHECK_INTERVAL)

try:
    asyncio.run(main())
except KeyboardInterrupt:
    print("\nüõë –°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")